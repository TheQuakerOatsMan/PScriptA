package AnalizadorDOsCero;

public class tablas {
	String [][] tabla1 = 
		{
				{" " ,"identificador","id_ent","abP"  ,"ciP","op_sum"  ,"op_res","op_mult","op_div","id_cad","id_cart","finale"	},
				{"E" ,"T E’"		 ,"T E’"  ,"T E’" ," "  ," "	   ," "	    ," "	  ," "	   ,"T E’"	,"T E’"	  ," "		},
				{"E’"," "			 ," "	  ," "	  ,"ç"  ,"op_sum T E’","op_res T E’","ç"	  ,"ç"	   ," "	 	," "	  ,"ç"		},	
				{"T" ,"F T’"		 ,"F T’"  ,"F T’" ," "  ," "	   ," "	    ," "	  ," "	   ,"F T’"	,"F T’"	  ," "		},
				{"T’"," "			 ," "	  ," "	  ,"ç"  ,"ç"	   ,"ç"		,"op_mult F T’" ,"op_div F T’"," "	 	," "	  ,"ç"		},
				{"F" ,"identificador","id_ent","abP E ciP"," "," "     ," "		," "	  ," "	   ,"id_cad","id_cart"," "		}
		};
	
	String [][] laperrona = 
		{
				{" "          	,"del_id"						,"puntcoma"		,"identificador"			,"id_ent"		,"id_dec"		,"id_cad"		,"id_cart"		,"abP"			,"ciP"		,"op_sum"		,"op_res"		,"op_mult"		,"op_div"		,"mod"			,"ala"			,"tallo"			,"op_min"	,"op_may"	,"op_mini"	,"op_mayi"	,"op_compd"		,"op_comp"		,"op_not"	,"op_and"	 	,"op_or"		,"verdadero"	,"falso"		,"cambio"																												,"caso"															,"si"									,"sino"				,"para"							,"mientras"							,"hacer"								,"endif","endfor","endmientras" ,"principal"													,"clase"										,"ent"								,"dec"								,"cart"								,"cad"								,"bool"								,"op_asig"			,","					,"proc"																,"func"																		,"finproc"	,"finfuncion"	,"endfin"	,"idproc"				,"idfuncion"					,"retornar"				,"puntcoma" ,"$"	,"finale"	,"id_clase"	,"inicio"},	
				{"prog"			," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," " 															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															,"clase id_clase inicio crea sentencias finale"	," "								," "								," "								," "								," "								," "				," "					," "																," "																		," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},															
				{"crea"			," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			,"principal clase id_clase inicio crea sentencias finale crea"	," "											,"dec crea"							,"dec crea"							,"dec crea"							,"dec crea"							,"dec crea"							," "				," "					,"modulos crea"														,"modulos crea"																," "		," "			," "		," "					," "							," "					," " 		," "	,"ç"		," "		," "},							
				{"dec"			," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," " 			," "															," "											,"ent identificador sigid puntcoma"	,"dec identificador sigid putcoma"	,"cart identificador sigid puntcoma","cad identificador sigid puntcoma"	,"bool identificador sigid puntcoma"," "				," "					," "																," "																		," "		," "			,"ç"		," "					," "							," "					," " 		," "	," "		," "		," "},					
				{"sigid"		,"del_id identificador sigid"	,"ç"			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											," "								," "								," "								," "								," "								,"op_asig L sigid"	,", identificador sigid"," "																," "																		," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},										
				{"modulos"		," "							," "			,"ç"						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															,"ç" 									," "				,"ç"							,"ç"								,"ç"									," "	," "	 ," "			," "															," "											,"ç"								,"ç"								,"ç"								,"ç"								,"ç"								," " 				," "					,"procedimiento"													,"funcion"																	,"ç"		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},				
				{"procedimiento"," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											," "								," "								," "								," "								," "								," " 				," "					,"proc id_func abP list-arg ciP inicio sentencias finale crea"		," "																		," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},							
				{"funcion"      ," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											," "								," "								," "								," "								," "								," " 				," "					," "																,"func id_func abP list-arg ciP tiporetorno inicio sentencias finale crea"	," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},								
				{"tiporetorno"	," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											,"ent"								,"dec"								,"cart"								,"cad"								,"bool"								," " 				," " 					," " 																," " 																		," " 		," " 			," " 		," " 					," " 							," " 					," " 		," "	," "		," "		," "},		
				{"list-arg"		," "							," "			," "						," "			," "			," "			," "			," "			,"ç"		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											,"ent identificador siglist"		,"dec identificador siglist"		,"cart identificador siglist"		,"cad identificador siglist"		,"bool identificador siglist"		," "				," "					," "																," "																		," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},												
				{"siglist"		,"del_id list-arg"				," "			," "						," "			," "			," "			," "			," "			,"ç"		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											," "								," "								," "								," "								," "								," " 				,", list-arg"			," "																," "																		," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},
				{"list-param"	," "							," "			,"L sig-param"				,"L sig-param"	,"L sig-param"	,"L sig-param"	,"L sig-param"	,"L sig-param"	,"ç"		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			,"L sig-param"	,"L sig-param"																											," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											," "								," "								," "								," "								," "								," " 				," "					," "																," "																		," "		," "			," "		," "					,"L sig-param"					," "					," " 		," "	," "		," "		," "}, 			
				{"sig-param"	,"del_id L sig-param"			," "			," "						," "			," "			," "			," "			," "			,"ç"		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," " 									," "				," "							," "								," "									," "	," "	 ," "			," "															," "											," "								," "								," "								," "								," "								," " 				,", L sig-param"		," "																," "																		," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},										
				{"sentencias"	," "							," "			,"sentencia sentencias"		," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															,"sentencia sentencias"					," "				,"sentencia sentencias"			,"sentencia sentencias"				,"sentencia sentencias"					,"ç"	,"ç"	 ,"ç"			," "															," "											," "								," "								," "								," "								," "								," " 				," "					," "																," "																		,"ç"		,"ç"			,"ç"		,"sentencia sentencias"	," "							,"sentencia sentencias"	,"ç" 		,"ç"	,"ç"		," "		," "},	
				{"sentencia"	," "							," "			,"asigna puntcoma"			," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			,"cambio abP id ciP inicio caso abP L ciP op_cond sentencias sigcaso default op_cond sentencias ruptura puntcoma finale"," "															,"si L inicio sentencias sino finale"	," "				,"para L do sentencias finale"	,"mientras L inicio sentencias end"	,"hacer sentencias mientras L puntcoma"	," "	," "	 ," "			," "															," "											,"dec sentencias"					,"dec sentencias"					,"dec sentencias"  					,"dec sentencias"					,"dec sentencias"					," "				," "					," "																," "																		," "		," "			," "		,"asigna puntcoma"		,"asigna puntcoma"				," "					," " 		," "	," "		," "		," "},
				{"sigcaso"		," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													,"caso abP L ciP op_cond sentencias ruptura puntcoma sigcaso"	," "									," "				," "							," " 								," " 									," " 	," "	 ," "			," " 															," "											," "								," "								," "								," " 								," "								," "				," "					," "																," "																		," "		," "	 		," "		," "					," "							," "					," " 		," "	," "		," "		," "}, 																												
				{"sigif"		," "							," "			," "						," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," "		," "	 		," " 			," "			," "			," "																													," "															," "									,"sino sentencias"	," "							," "								," "									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					," "							," "					," " 		," "	," "		," "		," "},																			
				{"asigna"		," "							," "			,"identificador op_asig L"	," "			," "			," "			," "			," "			," "		," "			," "			," "			," "			," "			," "			," "				," "		," "		," " 		," " 		," " 			," " 			," " 		," "	 		," " 			," "			," "			," "																													," "															," "									," "				," "							," "								," "									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		,"idproc ( list-param )"," "							,"retornar L"			," " 		," "	," "		," "		," "},				
				{"L"			," "							," "			,"R L’"						,"R L’"			,"R L’"			,"R L’"			,"R L’"			,"R L’"			," "		," "			," "			," "			," "			," "			,"R L’"			,"R L’"				," "		," "		," " 		," " 		," " 			," " 			,"op_not L"	," "	 		," " 			,"R L’"			,"R L’"			," "																													," "															," "									," "				," "							," "								," "									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					,"R L’"							," "					," " 		," "	," "		," "		," "},											
				{"L’"			," "							,"ç"			," "						," "			," "			," "			," "			," "			,"ç"		,"ç"			,"ç"			,"ç"			,"ç"			,"ç"			," "			," "				,"ç"		,"ç"		,"ç" 		,"ç" 		,"ç" 			,"ç" 			," "		,"op_and R L’"	,"op_or R L’"	," "			," "			," "																													," "															," "									," "				," "							," "								,"ç"									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					," "							," "					,"ç" 		,"ç"	," "		," "		," "},																											
				{"R"			," "							," "			,"E R’"						,"E R’"			,"E R’"			,"E R’"			,"E R’"			,"E R’"			," "		," "			," "			," "			," "			," "			,"E R’" 		,"E R’" 			," "		," "		," " 		," " 		," " 			," " 			," " 		,"ç" 	 		,"ç"  			,"E R’"			,"E R’"			," "																													," "															," "									," "				," "							," "								,"ç"									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					,"E R’"							," "					,"ç" 		,"ç"	," "		," "		," "},
				{"R’"			," "							,"ç"			," "						," "			," "			," "			," "			," "			,"ç"		,"ç"			,"ç"			,"ç"			,"ç"			,"ç"			," "			," "				,"op_min E"	,"op_may E"	,"op_min E"	,"op_mayi E","op_compd E"	,"op_comp E"	," "		,"ç"	 		,"ç"			," "			," "			," "																													," "															," "									," "				," "							," "								,"ç"									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					," "							," "					,"ç" 		,"ç"	," "		," "		," "},									
				{"E"			," "							," "			,"T E’"						,"T E’"			,"T E’"			,"T E’"			,"T E’"			,"T E’"			," "		," "			," "			," "			," "			," "			,"T E’"			,"T E’"				," "		," "		," " 		," " 		," " 			," " 			," "		," "	 		," "			,"T E’"			,"T E’"			," "																													," "															," "									," "				," "							," "								," "									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					,"T E’"							," "					," " 		," "	," "		," "		," "},															
				{"E’"			," "							,"ç"			," "						," "			," "			," "			," "			," "			,"ç"		,"op_sum T E’"	,"op_res T E’"	,"ç"			,"ç"			,"ç"			," "			," "				,"ç"		,"ç"		,"ç" 		,"ç" 		,"ç" 			,"ç" 			," "		,"ç"	 		,"ç"			," "			," "			," "																													," "															," "									," "				," "							," "								,"ç"									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					," "							," "					,"ç" 		,"ç"	," "		," "		," "},																		
				{"T"			," "							," "			,"F T’"						,"F T’"			,"F T’"			,"F T’"			,"F T’"			,"F T’"			," "		," "			," "			," "			," "			," "			,"F T’"			,"F T’"				," "		," "		," " 		," " 		," " 			," " 			," "		," "	 		," "			,"F T’"			,"F T’"			," "																													," "															," "									," "				," "							," "								," "									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					,"F T’"							," "					," " 		," "	," "		," "		," "},																														
				{"T’"			," "							,"ç"			," "						," "			," "			," "			," "			," "			,"ç"		,"ç"			,"ç"			,"op_mult F T’"	,"op_div F T’"	,"mod F T’"		," "			,"ç"				,"ç"		,"ç"		,"ç"		,"ç" 		,"ç" 			," "			,"ç"		,"ç"	 		," "			," "			," "			," "																													," "															," "									," "				," "							," "								,"ç"									," "	," "	 ," "			," "															," "											," "								," "								," "								," "								," "								," " 				," "					," "																," "																		," "		," "			," "		," "					," "							,"ç"					," " 		," "	," "		," "		," "},											
				{"F"			," "							," "			,"identificador"			,"id_ent"		,"id_dec"		,"id_cad"		,"id_cart"		,"abP L ciP"	," "		," "			," "			," "			," "			," "			,"ala abP L ciP","tallo abP L ciP"	," "		," "		," " 		," " 		," " 			," " 			," "		," "	 		," "			,"verdadero"	,"false"		," "																													," "															," "									," "				," "							," "								," "									," "	," "	 ," "	 		," "															," "											," "								," "								," "								," "								," "								," "				," " 					," "																," "																		," "		," "			," "		," "					,"idfuncion abP list-param ciP"	," "					," " 		," "	," "		," "		," "},												
	};
	String [][] laperrona2 = 
		{
				{" "          	,"identificador"		,"id_ent"		,"id_dec"		,"id_cad"	,"id_cart"		,"("			,")","+"		,"-"		,"*","/"	,"mod"		,"ala"		,"tallo"		,"<"	,">"	,"<="	,">="	,"!="	,"=="	,"!!"	,"&"	 ,"||"		,"verdadero"	,"falso"		,"cambio"		,"caso"	,"si"					,"sino"					,"para"					,"mientras"				,"repeat"				,"hacer","endif","endfor","endmientras" ,"principal","clase","ent"	,"dec"	,"cart"	,"cad"	,"bool"	,"->",","				,"proc"	,"funcion"	,"finproc"	,"finfuncion"	,"endfin"	,"idproc"				,"idfuncion"				,"retornar"	,"$"	},	
				{"prog"			," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," " 	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			,"principal clase id inicio crea sentencias finclase",	"clase id inicio crea sentencias finclase"			," "	," "," "," "," "," "," "," "," "," "," "," "	," "," "," "								," "	},															
				{"crea"			," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	,"dec crea",	"dec crea",	"dec crea",	"dec crea"				,"dec crea",	" "	," "		,"modulos crea"	,	"modulos crea"," "," "," "," "	," "," "								," "	},							
				{"dec"			," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," " 			," "		," "	,"ent identificador sigid ;",	 "dec id sigid ;"				,"cart id sigid ;"	,	 "cad id sigid ;","bool id sigid ;"," "," "," "," "," "," "	,"ç"," "," "	," "					," " 	},					
				{"sigid"		," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	,"> L sigid"			,", identificador sigid"		," "			," "		," "		," "			," "," "," "," "					," "	},										
				{"modulos"		,"ç"					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	,"ç" 					," "					,"ç"					,"ç"					,"ç"					," "	," "	," "	 ," "			," "		," "	,"ç"	,"ç"	,"ç"	,"ç"	,"ç"	," " ," "				,"procedimiento"	, 	"funcion","ç"			," "		," "		," "			," "	," "						," "	},				
				{"procedimiento"," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ," "				,"procedimiento idproc ( list-arg ) inicio sentencias finproc"			," "," "," "	," "," "," "," "					," "	},							
				{"funcion"      ," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ," "				," "	,"funcion idf ( list-arg ) tiporetorno inicio sentencias endf"		," "," "	," "," "," "," "					," "	},								
				{"tiporetorno"	," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	,"ent"	,"dec"	,"cart"	,"cad"	,"bool"	," " ," " 				," " 	," " 		," " 		," " 			," " 		," " 		," " 			," " 								," "	},		
				{"list-arg"		," "					," "			," "			," "		," "			," "			,"ç"," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	,"ent identificador siglist","dec identificador siglist"		,"cart identificador siglist","cad identificador siglist","bool identificador siglist"	," "," "," "," "," "," "," "," "," "," "," "},												
				{"siglist"		," "					," "			," "			," "		," "			," "			,"ç"," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ,"list-arg"		," "	," "		," "		," "			," "		," "					," "						," "		," "	},
				{"list-param"	,"L sig-param"			,"L sig-param"	,"L sig-param","L sig-param","L sig-param"	,"L sig-param"	,"ç"," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			,"L sig-param"	,"L sig-param"	," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ," "				," "	," "		," "		," "			," "		," "					,"L sig-param"				," "		," "	}, 			
				{"sig-param"	," "					," "			," "			," "		," "			," "			,"ç"," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," " 					," "					," "					," "					," "					," "	," "	," "	 ," "			," "		," "	," "	," "	," "	," "	," "	," " ,", L sig-param"	," "	," "		," "		," "			," "		," "					," "						," "		," " 	},										
				{"sentencias"	,"sentencia sentencias"	," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	,"sentencia sentencias"	," "					,"sentencia sentencias"	,"sentencia sentencias"	,"sentencia sentencias"	," "	,"ç"	,"ç"	 ,"ç"			," "		," "	," "	," "	," "	," "	," "	," " ," "				," "	," "		,"ç"		,"ç"			,"ç"		,"sentencia sentencias"	," "			,"sentencia sentencias"	,"ç"	},	
				{"sentencia"	,"asigna;"				," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			,"cambio ( id ) inicio caso ( L ) ?: sentencias sigcaso default ?: sentencias ruptura ; fin"," ","si L inicio sentencias sino endif"," ","para L do sentencias endpara","mientras L do sentencias endmientras","repeat sentencias until L ;"," "," "," "," "," "," ","dec sentencias","dec sentencias","dec sentencias"  ,"dec sentencias","dec sentencias"," "," "," "," "," "," "," "	,"asigna;","asigna;"," "},
				{"sigcaso"		," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			,"caso ( L ) ?: sentencias ruptura ; sigcaso" 			," "					," "					," "					," " 	," " 	," " 	," " 			," "		," "	," " 	," "	," "	," "	," "	," " ," "				," "	," "		," "		," "			," "		," "	 				," "						," "		," "	}, 																												
				{"sigif"		," "					," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," "	," "	 ," " 		," "			," "			," "			," "	," "					,"sino sentencias"		," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					," "						," "		," "	},																			
				{"asigna"		,"id -> L"				," "			," "			," "		," "			," "			," "," "		," "		," "," "	," "		," "		," "			," "	," "	," " 	," " 	," " 	," " 	," " 	," "	 ," " 		," "			," "			," "			," "	," "					," "					," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		,"idproc ( list-param )"," "						,"retornar L"," "	},				
				{"L"			,"R L’"					,"R L’"			,"R L’"			,"R L’"		,"R L’"			,"R L’"			," "," "		," "		," "," "	," "		,"R L’"		,"R L’"			," "	," "	," " 	," " 	," " 	," " 	,"!! L"	," "	 ," " 		,"R L’"			,"R L’"			," "			," "	," "					," "					," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					,"R L’"						," "		," "	},											
				{"L’"			," "					," "			," "			," "		," "			," "			,"ç","ç"		,"ç"		,"ç","ç"	,"ç"		," "		," "			,"ç"	,"ç"	,"ç" 	,"ç" 	,"ç" 	,"ç" 	," "	,"& R L’","|| R L’" ," "			," "			," "			," "	," "					," "					," "					," "					," "					,"ç"	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					," "						," "		,"ç"	},																											
				{"R"			,"E R’"					,"E R’"			,"E R’"			,"E R’"		,"E R’"			,"E R’"			," "," "		," "		," "," "	," "		,"E R’" 	,"E R’" 		," "	," "	," " 	," " 	," " 	," " 	," " 	,"ç" 	 ,"ç"  		,"E R’"			,"E R’"			," "			," "	," "					," "					," "					," "					," "					,"ç"	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					,"E R’"						," "		,"ç"	},
				{"R’"			," "					," "			," "			," "		," "			," "			,"ç","ç"		,"ç"		,"ç","ç"	,"ç"		," "		," "			,"< E"	,"> E"	,"<= E"	,">= E"	,"! E"	,"== E"	," "	,"ç"	 ,"ç"		," "			," "			," "			," "	," "					," "					," "					," "					," "					,"ç"	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					," "						," "		,"ç"	},									
				{"E"			,"T E’"					,"T E’"			,"T E’"			,"T E’"		,"T E’"			,"T E’"			," "," "		," "		," "," "	," "		,"T E’"		,"T E’"			," "	," "	," " 	," " 	," " 	," " 	," "	," "	 ," "		,"T E’"			,"T E’"			," "			," "	," "					," "					," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					,"T E’"						," "		," "	},															
				{"E’"			," "					," "			," "			," "		," "			," "			,"ç","+ T E’"	,"- T E’"	,"ç","ç"	,"ç"		," "		," "			,"ç"	,"ç"	,"ç" 	,"ç" 	,"ç" 	,"ç" 	," "	,"ç"	 ,"ç"		," "			," "			," "			," "	," "					," "					," "					," "					," "					,"ç"	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					," "						," "		,"ç"	},																		
				{"T"			,"F T’"					,"F T’"			,"F T’"			,"F T’"		,"F T’"			,"F T’"			," "," "		," "		," "," "	," "		,"F T’"		,"F T’"			," "	," "	," " 	," " 	," " 	," " 	," "	," "	 ," "		,"F T’"			,"F T’"			," "			," "	," "					," "					," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					,"F T’"						," "		," "	},																														
				{"T’"			," "					," "			," "			," "		," "			," "			,"ç","ç"		,"ç"		,"* F T’"	,"* F T’"	,"mod F T’"	," "			,"ç"	,"ç"	,"ç"	,"ç"	,"ç" 	,"ç" 	," "	,"ç"	 ,"ç"		," "			," "			," "			," "	," "					," "					," "					," "					," "					,"ç"	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					," "						," "		,"ç"	},											
				{"F"			,"identificador"		,"id_ent"		,"id_dec"		,"id_cad"	,"id_cart"		,"( L )"		," "," "		," "		," "," "	," "		,"ala ( L )","tallo ( L )"	," "	," "	," " 	," " 	," " 	," " 	," "	," "	 ," "		,"true"			,"false"		," "			," "	," "					," "					," "					," "					," "					," "	," "	," "	 ," "	 		," "		," "	," "	," "	," "	," "	," "	," "	," " 			," "	," "		," "		," "			," "		," "					,"idfuncion ( list-param )"	," "		," "	},												
	};

}
